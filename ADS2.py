# -*- coding: utf-8 -*-
"""
Created on Thu Dec  8 14:07:01 2022

@author: aishw
"""
#import all necessary libraries and packages
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy import stats

#defining the function for loading filename as argument
"""
iloc() helps us to select a specific rows or columns from the given data set
axis=1: means along "columns" or vertical axis
inplace=False : performs operation on given data and returns a new copy of data
set_axis() function is used to assign desired index to given axis
reset_index() method allows you reset the index back to the default 
df.reset_index(drop=True) drops the current index of the DataFrame and replaces it with an index of increasing integers
"""
def loadfile(filename):
   df_data = pd.read_csv(filename, skiprows = 3)
   df_data = df_data.iloc[[8,13,77,263,40,251,81],[0,52,53,54,55,62,63]]
   print(df_data)
   df_data = df_data.set_axis(['Country','2008','2009','2010','2011','2018','2019'],axis=1,inplace=False)
   df_data = df_data.reset_index(drop=True) 
   #transposing years into one column for plotting line graph
   df_data1 = df_data.T
   print(df_data)
   print(df_data1)
   return df_data, df_data1

#reading a csv file
df1, df11 = loadfile('Total green house gas emissions.csv')

# basic statistical properties
print(df1.describe())
    
# Bar plot
"""
legend: to show the index value on the graph
title: assigning title for the graph
savefig: saving the visualised data in a png format
show: to show the visualisation of given data
"""
df1.plot(kind='bar',x='Country')
plt.legend()
plt.xlabel('Country')
plt.ylabel('Values')
plt.title('Green House gas emissions over the years')
plt.savefig('Green House gas emissions over the years barplot.png')
plt.show()

print("Pearsons correlations")
print(df1.corr())
print("Kendall correlations")
print(df1.corr(method="kendall"))

#Pie chart
"""
labels: list of labels of same length
dpi(dots-per-inch): it is for the clarity of the pie chart
autopct: enables you to display the percent value using Python string formatting
pctdistance:  ratio between the center of each pie slice and the start of the text generated by autopct
labeldistance: radial distance at which the pie labels are drawn
title: assigning title for the graph
savefig: saving the visualised data in a png format
show: to show the visualisation of given data
"""
plt.figure(dpi=144)
plt.pie(df1["2008"], labels=df1["Country"],autopct='%1.0f%%', pctdistance=1.1, labeldistance=1.2)
plt.title("Green House gas emissions in 2008")
plt.savefig("Green House gas emission in 2008")
plt.show()

plt.figure(dpi=144)
plt.pie(df1["2018"], labels=df1["Country"],autopct='%1.0f%%', pctdistance=1.1, labeldistance=1.2)
plt.title("Green House gas emission in 2018")
plt.savefig("Green House gas emission in 2018")
plt.show()


# Statistical properties for selected countries and years
"""
Prints distribution dist. Uses numpy and scipy.stats
Average: Average (Arithmetic mean) is a mathematical function, calculated by adding the numeric values in the list and dividing them by the count of numbers of the list
std. deviations: calculates the standard deviation for given dist
kurtosis(dist): to calculate the centralised and normalised excess kurtosis of given dist.
skew(dist): to calculate the centralised and normalised skewness of given dist
"""
def stats_func(dist):
    print("Average: ", np.average(dist))
    print("Std. deviations:", np.std(dist))
    print("Skewness: ", stats.skew(dist))
    print("Kurtosis: ", stats.kurtosis(dist))
    return

print()
print("2008")
y1 = stats_func(df1["2008"])
print()
print("2009")
y2 = stats_func(df1["2009"])

print()
print("2010")
y2 = stats_func(df1["2010"])

print()
print("2011")
y2 = stats_func(df1["2011"])

print()
print("2018")
y2 = stats_func(df1["2018"])

print()
print("2019")
y2 = stats_func(df1["2019"])


# normalizing the statistics for the selected years and countries
def stat_norm(dist):
    aver = np.average(dist)
    stdev = np.std(dist)
    dist = (dist-aver) / stdev
    return dist


print()
print("2008")
y1 = stat_norm(df1["2008"])
stats_func(y1)

print()
print("2009")
y2 = stat_norm(df1["2009"])
stats_func(y2)

print()
print("2010")
y2 = stat_norm(df1["2010"])
stats_func(y2)

print()
print("2011")
y2 = stat_norm(df1["2011"])
stats_func(y2)

print()
print("2018")
y2 = stat_norm(df1["2018"])
stats_func(y2)

print()
print("2019")
y2 = stat_norm(df1["2019"])
stats_func(y2)

# defining a function to read data
def readFile_Pop(fname):
    data = pd.read_csv(fname,skiprows=3)
    return data

GreenHouseGasEmission_data =r"C:\Users\aishw\.spyder-py3\Total green house gas emissions.csv"

df_info = readFile_Pop(GreenHouseGasEmission_data)


# creating a data frame to select few countries and years
df2 = df_info[(df_info['Country Name'] == 'United Arab Emirates')
                    |(df_info['Country Name'] == 'Australia')
                    |(df_info['Country Name'] == 'South Africa')
                    |(df_info['Country Name'] == 'China')
                    |(df_info['Country Name'] == 'United States')
                    |(df_info['Country Name'] == 'United Kingdom')]


  # grouping the countries by mean
df2 = df2[['Country Name','2008','2009','2010','2011','2018','2019']]
df2 = df2.groupby('Country Name').agg('mean')

print(df2)

def Line_plot():
          
    #transposing years into one column for plotting line graph
    df3 = df2.transpose()
    print(df3)

    #storing 
    countries = df3.columns

    #line plot
    """
    df3: name of the dataframe
    figsize: it is a tuple of the width and height of the figure in inches
    title: assigning title for the graph
    xlabel, ylabel: labels for x and y axis
    savefig: saving the visualised data in a png format
    show: to show the visualisation of given data
    """
    plt.figure(figsize = (20,10))
    plt.plot(df3, label = countries)
    plt.legend(loc='upper right')
    plt.title('Green house gas emission of various countries')
    plt.xlabel('Years')
    plt.ylabel('Total Green house gas emission')
    plt.savefig('lineplot.png')
    plt.show()

# Calling the defined function
Line_plot()
